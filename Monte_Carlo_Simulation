import numpy as np
import matplotlib.pyplot as plt

def eq1(x, y):
    return np.sqrt(np.abs(x)) + np.sqrt(np.abs(y))

def eq2(x, y):
    return (x**2)/16 + (y**2)/9

x = np.linspace(-4, 4, 400)
y = np.linspace(-3, 3, 300)
X, Y = np.meshgrid(x, y)

Z1 = eq1(X, Y)
Z2 = eq2(X, Y)

import numpy as np
import matplotlib.pyplot as plt

# Define the equations
def eq1(x, y):
    return np.sqrt(np.abs(x)) + np.sqrt(np.abs(y))

def eq2(x, y):
    return (x**2)/16 + (y**2)/9

# Generate 1000 random test points
num_test_points = 1000
test_x = np.random.uniform(-4, 4, num_test_points)
test_y = np.random.uniform(-3, 3, num_test_points)
test_points = list(zip(test_x, test_y))

# Initialize lists to store points inside, outside, and on the boundary
inside_points = []
outside_points = []
boundary_points = []

# Test the points and categorize them
for point in test_points:
    x, y = point
    if eq1(x, y) <= 1 and eq2(x, y) <= 1:
        inside_points.append(point)
    elif eq1(x, y) > 1 and eq2(x, y) > 1:
        outside_points.append(point)
    else:
        boundary_points.append(point)

# Convert lists to arrays for plotting
inside_points = np.array(inside_points)
outside_points = np.array(outside_points)
boundary_points = np.array(boundary_points)

# Plot the points and the graph in the same cell
plt.figure(figsize=(10, 8))
plt.scatter(inside_points[:, 0], inside_points[:, 1], color='green', label='Inside')
plt.scatter(outside_points[:, 0], outside_points[:, 1], color='red', label='Outside')
plt.scatter(boundary_points[:, 0], boundary_points[:, 1], color='blue', label='Boundary')
plt.xlabel('x')
plt.ylabel('y')
plt.title('Points Categorized by Region')
plt.legend()
plt.grid(True)

# Plot the region defined by the equations
x = np.linspace(-4, 4, 400)
y = np.linspace(-3, 3, 300)
X, Y = np.meshgrid(x, y)
Z1 = eq1(X, Y)
Z2 = eq2(X, Y)
plt.contour(X, Y, Z1, levels=[1], colors='r', linestyles='dashed', label='|x|^(1/2) + |y|^(1/2) = 1')
plt.contour(X, Y, Z2, levels=[1], colors='b', linestyles='dotted', label='x^2/16 + y^2/9 = 1')

plt.show()

plt.figure(figsize=(8, 6))
plt.contour(X, Y, Z1, levels=[1], colors='r', label='|x|^(1/2) + |y|^(1/2) = 1')
plt.contour(X, Y, Z2, levels=[1], colors='b', label='x^2/16 + y^2/9 = 1')
plt.xlabel('x')
plt.ylabel('y')
plt.title('Plot of Equations')
plt.legend()
plt.grid(True)
plt.show()

# Test points
points = [(0, 0), (2, 1), (-3, 2)]

for point in points:
    x, y = point
    if eq1(x, y) <= 1 and eq2(x, y) <= 1:
        print(f"Point {point} lies inside the region.")
    elif eq1(x, y) > 1 and eq2(x, y) > 1:
        print(f"Point {point} lies outside the region.")
    else:
        print(f"Point {point} lies on the boundary of the region.")

import numpy as np

# Define the equations
def eq1(x, y):
    return np.sqrt(np.abs(x)) + np.sqrt(np.abs(y))

def eq2(x, y):
    return (x**2)/16 + (y**2)/9

# Generate 1000 random test points
num_test_points = 1000
test_x = np.random.uniform(-4, 4, num_test_points)
test_y = np.random.uniform(-3, 3, num_test_points)
test_points = list(zip(test_x, test_y))

# Test the points
for point in test_points:
    x, y = point
    if eq1(x, y) <= 1 and eq2(x, y) <= 1:
        print(f"Point {point} lies inside the region.")
    elif eq1(x, y) > 1 and eq2(x, y) > 1:
        print(f"Point {point} lies outside the region.")
    else:
        print(f"Point {point} lies on the boundary of the region.")

import numpy as np
import matplotlib.pyplot as plt

# Define the equations
def eq1(x, y):
    return np.sqrt(np.abs(x)) + np.sqrt(np.abs(y))

def eq2(x, y):
    return (x**2)/16 + (y**2)/9

# Generate 1000 random test points
num_test_points = 1000
test_x = np.random.uniform(-4, 4, num_test_points)
test_y = np.random.uniform(-3, 3, num_test_points)
test_points = list(zip(test_x, test_y))

# Initialize lists to store points inside, outside, and on the boundary
inside_points = []
outside_points = []
boundary_points = []

# Test the points and categorize them
for point in test_points:
    x, y = point
    if eq1(x, y) <= 1 and eq2(x, y) <= 1:
        inside_points.append(point)
    elif eq1(x, y) > 1 and eq2(x, y) > 1:
        outside_points.append(point)
    else:
        boundary_points.append(point)

# Convert lists to arrays for plotting
inside_points = np.array(inside_points)
outside_points = np.array(outside_points)
boundary_points = np.array(boundary_points)

# Plot the points and the graph in the same cell
plt.figure(figsize=(10, 8))
plt.scatter(inside_points[:, 0], inside_points[:, 1], color='green', label='Inside')
plt.scatter(outside_points[:, 0], outside_points[:, 1], color='red', label='Outside')
plt.scatter(boundary_points[:, 0], boundary_points[:, 1], color='blue', label='Boundary')
plt.xlabel('x')
plt.ylabel('y')
plt.title('Points Categorized by Region')
plt.legend()
plt.grid(True)

# Plot the region defined by the equations
x = np.linspace(-4, 4, 400)
y = np.linspace(-3, 3, 300)
X, Y = np.meshgrid(x, y)
Z1 = eq1(X, Y)
Z2 = eq2(X, Y)
plt.contour(X, Y, Z1, levels=[1], colors='r', linestyles='dashed', label='|x|^(1/2) + |y|^(1/2) = 1')
plt.contour(X, Y, Z2, levels=[1], colors='b', linestyles='dotted', label='x^2/16 + y^2/9 = 1')

plt.show()
